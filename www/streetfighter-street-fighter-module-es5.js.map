{"version":3,"sources":["/./node_modules/@ngrx/entity/fesm5/entity.js","/./src/app/streetfighter/components/fighter-detail/fighter-detail.component.html","/./src/app/streetfighter/components/fighter-list/fighter-list.component.html","/./src/app/streetfighter/containers/fighter/fighter.component.html","/./src/app/streetfighter/containers/fighters/fighters.component.html","/./src/app/streetfighter/components/fighter-detail/fighter-detail.component.scss","/./src/app/streetfighter/components/fighter-detail/fighter-detail.component.ts","/./src/app/streetfighter/components/fighter-list/fighter-list.component.scss","/./src/app/streetfighter/components/fighter-list/fighter-list.component.ts","/./src/app/streetfighter/containers/fighter/fighter.component.scss","/./src/app/streetfighter/containers/fighter/fighter.component.ts","/./src/app/streetfighter/containers/fighters/fighters.component.scss","/./src/app/streetfighter/containers/fighters/fighters.component.ts","/./src/app/streetfighter/store/actions/cards.actions.ts","/./src/app/streetfighter/store/effects/cards.effects.ts","/./src/app/streetfighter/store/reducers/cards.reducer.ts","/./src/app/streetfighter/store/reducers/global.reducer.ts","/./src/app/streetfighter/store/selectors/cards.selectors.ts","/./src/app/streetfighter/street-fighter-routing.module.ts","/./src/app/streetfighter/street-fighter.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACqD;AACR;AACH;;AAE1C;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,yCAAyC,sBAAsB;AAC/D;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA,0CAA0C,kBAAkB;AAC5D,+CAA+C,uBAAuB;AACtE,wBAAwB,kEAAc;AACtC,0CAA0C,qBAAqB,EAAE;AACjE,SAAS;AACT,0BAA0B,kEAAc,4BAA4B,mBAAmB,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kEAAc;AACrC,4BAA4B,kEAAc;AAC1C,uBAAuB,kEAAc;AACrC,yBAAyB,kEAAc;AACvC;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACA,iBAAiB,sDAAQ;AACzB,sBAAsB,sDAAQ,GAAG;AACjC;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,mBAAmB,sDAAQ,GAAG,UAAU,uCAAuC;AAC/E;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,+DAAS;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sDAAQ,6CAA6C,oBAAoB;AAC3G;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,6CAA6C,EAAE;AAC9F;AACA,oCAAoC,8BAA8B,EAAE;AACpE,iCAAiC,mCAAmC,EAAE;AACtE;AACA,wDAAwD,6BAA6B,EAAE;AACvF;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,wBAAwB;AACxB,SAAS;AACT;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,oCAAoC,EAAE;AAC1F;AACA;AACA,iEAAiE,2CAA2C,EAAE;AAC9G;AACA,yDAAyD,0BAA0B,EAAE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0BAA0B;AACxD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sDAAQ,6CAA6C,oBAAoB;AAC3G;AACA;AACA;AACA,kCAAkC,0BAA0B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,4DAA4D,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,gDAAgD,EAAE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qDAAqD,0CAA0C,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0BAA0B;AACxD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sDAAQ,6CAA6C,oBAAoB;AAC3G;AACA;AACA;AACA,kCAAkC,0BAA0B;AAC5D;AACA;AACA;AAC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","file":"streetfighter-street-fighter-module-es5.js","sourcesContent":["/**\n * @license NgRx 8.2.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { __spread, __assign, __values } from 'tslib';\nimport { createSelector } from '@ngrx/store';\nimport { isDevMode } from '@angular/core';\n\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {},\n    };\n}\nfunction createInitialStateFactory() {\n    function getInitialState(additionalState) {\n        if (additionalState === void 0) { additionalState = {}; }\n        return Object.assign(getInitialEntityState(), additionalState);\n    }\n    return { getInitialState: getInitialState };\n}\n\nfunction createSelectorsFactory() {\n    function getSelectors(selectState) {\n        var selectIds = function (state) { return state.ids; };\n        var selectEntities = function (state) { return state.entities; };\n        var selectAll = createSelector(selectIds, selectEntities, function (ids, entities) {\n            return ids.map(function (id) { return entities[id]; });\n        });\n        var selectTotal = createSelector(selectIds, function (ids) { return ids.length; });\n        if (!selectState) {\n            return {\n                selectIds: selectIds,\n                selectEntities: selectEntities,\n                selectAll: selectAll,\n                selectTotal: selectTotal,\n            };\n        }\n        return {\n            selectIds: createSelector(selectState, selectIds),\n            selectEntities: createSelector(selectState, selectEntities),\n            selectAll: createSelector(selectState, selectAll),\n            selectTotal: createSelector(selectState, selectTotal),\n        };\n    }\n    return { getSelectors: getSelectors };\n}\n\nvar DidMutate;\n(function (DidMutate) {\n    DidMutate[DidMutate[\"EntitiesOnly\"] = 0] = \"EntitiesOnly\";\n    DidMutate[DidMutate[\"Both\"] = 1] = \"Both\";\n    DidMutate[DidMutate[\"None\"] = 2] = \"None\";\n})(DidMutate || (DidMutate = {}));\nfunction createStateOperator(mutator) {\n    return function operation(arg, state) {\n        var clonedEntityState = {\n            ids: __spread(state.ids),\n            entities: __assign({}, state.entities),\n        };\n        var didMutate = mutator(arg, clonedEntityState);\n        if (didMutate === DidMutate.Both) {\n            return Object.assign({}, state, clonedEntityState);\n        }\n        if (didMutate === DidMutate.EntitiesOnly) {\n            return __assign({}, state, { entities: clonedEntityState.entities });\n        }\n        return state;\n    };\n}\n\nfunction selectIdValue(entity, selectId) {\n    var key = selectId(entity);\n    if (isDevMode() && key === undefined) {\n        console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n    }\n    return key;\n}\n\nfunction createUnsortedStateAdapter(selectId) {\n    function addOneMutably(entity, state) {\n        var key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return DidMutate.None;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    function addManyMutably(entities, state) {\n        var e_1, _a;\n        var didMutate = false;\n        try {\n            for (var entities_1 = __values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {\n                var entity = entities_1_1.value;\n                didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    function addAllMutably(entities, state) {\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(entities, state);\n        return DidMutate.Both;\n    }\n    function removeOneMutably(key, state) {\n        return removeManyMutably([key], state);\n    }\n    function removeManyMutably(keysOrPredicate, state) {\n        var keys = keysOrPredicate instanceof Array\n            ? keysOrPredicate\n            : state.ids.filter(function (key) { return keysOrPredicate(state.entities[key]); });\n        var didMutate = keys\n            .filter(function (key) { return key in state.entities; })\n            .map(function (key) { return delete state.entities[key]; }).length > 0;\n        if (didMutate) {\n            state.ids = state.ids.filter(function (id) { return id in state.entities; });\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    function removeAll(state) {\n        return Object.assign({}, state, {\n            ids: [],\n            entities: {},\n        });\n    }\n    function takeNewKey(keys, update, state) {\n        var original = state.entities[update.id];\n        var updated = Object.assign({}, original, update.changes);\n        var newKey = selectIdValue(updated, selectId);\n        var hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    function updateManyMutably(updates, state) {\n        var newKeys = {};\n        updates = updates.filter(function (update) { return update.id in state.entities; });\n        var didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            var didMutateIds = updates.filter(function (update) { return takeNewKey(newKeys, update, state); }).length > 0;\n            if (didMutateIds) {\n                state.ids = state.ids.map(function (id) { return newKeys[id] || id; });\n                return DidMutate.Both;\n            }\n            else {\n                return DidMutate.EntitiesOnly;\n            }\n        }\n        return DidMutate.None;\n    }\n    function mapMutably(map, state) {\n        var changes = state.ids.reduce(function (changes, id) {\n            var change = map(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id: id, changes: change });\n            }\n            return changes;\n        }, []);\n        var updates = changes.filter(function (_a) {\n            var id = _a.id;\n            return id in state.entities;\n        });\n        return updateManyMutably(updates, state);\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    function upsertManyMutably(entities, state) {\n        var e_2, _a;\n        var added = [];\n        var updated = [];\n        try {\n            for (var entities_2 = __values(entities), entities_2_1 = entities_2.next(); !entities_2_1.done; entities_2_1 = entities_2.next()) {\n                var entity = entities_2_1.value;\n                var id = selectIdValue(entity, selectId);\n                if (id in state.entities) {\n                    updated.push({ id: id, changes: entity });\n                }\n                else {\n                    added.push(entity);\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (entities_2_1 && !entities_2_1.done && (_a = entities_2.return)) _a.call(entities_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        var didMutateByUpdated = updateManyMutably(updated, state);\n        var didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    return {\n        removeAll: removeAll,\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        addAll: createStateOperator(addAllMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably),\n        map: createStateOperator(mapMutably),\n    };\n}\n\nfunction createSortedStateAdapter(selectId, sort) {\n    var _a = createUnsortedStateAdapter(selectId), removeOne = _a.removeOne, removeMany = _a.removeMany, removeAll = _a.removeAll;\n    function addOneMutably(entity, state) {\n        return addManyMutably([entity], state);\n    }\n    function addManyMutably(newModels, state) {\n        var models = newModels.filter(function (model) { return !(selectIdValue(model, selectId) in state.entities); });\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            merge(models, state);\n            return DidMutate.Both;\n        }\n    }\n    function addAllMutably(models, state) {\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(models, state);\n        return DidMutate.Both;\n    }\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    function takeUpdatedModel(models, update, state) {\n        if (!(update.id in state.entities)) {\n            return false;\n        }\n        var original = state.entities[update.id];\n        var updated = Object.assign({}, original, update.changes);\n        var newKey = selectIdValue(updated, selectId);\n        delete state.entities[update.id];\n        models.push(updated);\n        return newKey !== update.id;\n    }\n    function updateManyMutably(updates, state) {\n        var models = [];\n        var didMutateIds = updates.filter(function (update) { return takeUpdatedModel(models, update, state); }).length >\n            0;\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            var originalIds_1 = state.ids;\n            var updatedIndexes_1 = [];\n            state.ids = state.ids.filter(function (id, index) {\n                if (id in state.entities) {\n                    return true;\n                }\n                else {\n                    updatedIndexes_1.push(index);\n                    return false;\n                }\n            });\n            merge(models, state);\n            if (!didMutateIds &&\n                updatedIndexes_1.every(function (i) { return state.ids[i] === originalIds_1[i]; })) {\n                return DidMutate.EntitiesOnly;\n            }\n            else {\n                return DidMutate.Both;\n            }\n        }\n    }\n    function mapMutably(updatesOrMap, state) {\n        var updates = state.ids.reduce(function (changes, id) {\n            var change = updatesOrMap(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id: id, changes: change });\n            }\n            return changes;\n        }, []);\n        return updateManyMutably(updates, state);\n    }\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    function upsertManyMutably(entities, state) {\n        var e_1, _a;\n        var added = [];\n        var updated = [];\n        try {\n            for (var entities_1 = __values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {\n                var entity = entities_1_1.value;\n                var id = selectIdValue(entity, selectId);\n                if (id in state.entities) {\n                    updated.push({ id: id, changes: entity });\n                }\n                else {\n                    added.push(entity);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var didMutateByUpdated = updateManyMutably(updated, state);\n        var didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    function merge(models, state) {\n        models.sort(sort);\n        var ids = [];\n        var i = 0;\n        var j = 0;\n        while (i < models.length && j < state.ids.length) {\n            var model = models[i];\n            var modelId = selectIdValue(model, selectId);\n            var entityId = state.ids[j];\n            var entity = state.entities[entityId];\n            if (sort(model, entity) <= 0) {\n                ids.push(modelId);\n                i++;\n            }\n            else {\n                ids.push(entityId);\n                j++;\n            }\n        }\n        if (i < models.length) {\n            state.ids = ids.concat(models.slice(i).map(selectId));\n        }\n        else {\n            state.ids = ids.concat(state.ids.slice(j));\n        }\n        models.forEach(function (model, i) {\n            state.entities[selectId(model)] = model;\n        });\n    }\n    return {\n        removeOne: removeOne,\n        removeMany: removeMany,\n        removeAll: removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        addAll: createStateOperator(addAllMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        map: createStateOperator(mapMutably),\n    };\n}\n\nfunction createEntityAdapter(options) {\n    if (options === void 0) { options = {}; }\n    var _a = __assign({ sortComparer: false, selectId: function (instance) { return instance.id; } }, options), selectId = _a.selectId, sortComparer = _a.sortComparer;\n    var stateFactory = createInitialStateFactory();\n    var selectorsFactory = createSelectorsFactory();\n    var stateAdapter = sortComparer\n        ? createSortedStateAdapter(selectId, sortComparer)\n        : createUnsortedStateAdapter(selectId);\n    return __assign({ selectId: selectId,\n        sortComparer: sortComparer }, stateFactory, selectorsFactory, stateAdapter);\n}\n\nvar Dictionary = /** @class */ (function () {\n    function Dictionary() {\n    }\n    return Dictionary;\n}());\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { createEntityAdapter, Dictionary };\n//# sourceMappingURL=entity.js.map\n","module.exports = \"<form [formGroup]=\\\"fighterForm\\\">\\r\\n  <mat-card>\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>\\r\\n        <label *ngIf=\\\"fighterForm.get('id').value\\\">Editar</label>\\r\\n        <label *ngIf=\\\"!fighterForm.get('id').value\\\">Novo</label>\\r\\n      </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" placeholder=\\\"Name\\\" formControlName=\\\"name\\\" value=\\\"{{fighterForm.value?.name}}\\\" required>\\r\\n      </mat-form-field>\\r\\n    </mat-card-content>\\r\\n    <mat-card-content>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" placeholder=\\\"Country\\\" formControlName=\\\"country\\\" value=\\\"{{fighterForm.value?.country}}\\\" required>\\r\\n      </mat-form-field>\\r\\n    </mat-card-content>\\r\\n    <mat-card-content>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" placeholder=\\\"Fighting Style\\\" formControlName=\\\"fightingStyle\\\" value=\\\"{{fighterForm.value?.fightingStyle}}\\\" required>\\r\\n      </mat-form-field>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n      <button mat-flat-button routerLink=\\\"../fighters\\\" [disabled]=\\\"fighterForm.invalid\\\" (click)=\\\"!fighterForm.invalid && update()\\\" color=\\\"primary\\\">Salvar</button>\\r\\n      <button mat-flat-button *ngIf=\\\"fighterForm.get('id').value\\\" (click)=\\\"delete()\\\" color=\\\"primary\\\">Excluir</button>\\r\\n      <button mat-flat-button routerLink=\\\"../fighters\\\" (click)=\\\"unselect()\\\" color=\\\"primary\\\">Voltar</button>\\r\\n    </mat-card-actions>\\r\\n  </mat-card>\\r\\n</form>\\r\\n\"","module.exports = \"<mat-list>\\r\\n  <mat-list-item *ngFor=\\\"let card of cards\\\" (click)=\\\"select(card)\\\" routerLink=\\\"../fighter\\\">\\r\\n    {{card.name}}\\r\\n  </mat-list-item>\\r\\n</mat-list>\\r\\n\\r\\n<button mat-fab class=\\\"fab-bottom-right\\\" routerLink=\\\"../fighter\\\">\\r\\n  <mat-icon>add</mat-icon>\\r\\n</button>\\r\\n\"","module.exports = \"<app-fighter-detail [card]=\\\"card$ | async\\\" (actionEmitter)=\\\"dispatch($event)\\\"></app-fighter-detail>\\r\\n\"","module.exports = \"<div class=\\\"container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start\\\">\\r\\n  <mat-card>\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>Cartas cadastradas</mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n      <app-fighter-list [cards]=\\\"cards$ | async\\\" (actionEmitter)=\\\"dispatch($event)\\\"></app-fighter-list>\\r\\n    </mat-card-content>\\r\\n  </mat-card>\\r\\n</div>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N0cmVldGZpZ2h0ZXIvY29tcG9uZW50cy9maWdodGVyLWRldGFpbC9maWdodGVyLWRldGFpbC5jb21wb25lbnQuc2NzcyJ9 */\"","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {Fighter} from '../../model/fighter.model';\r\nimport {createCard, deleteCard, selectCard, unselectCard, updateCard} from '../../store/actions/cards.actions';\r\nimport {Action} from '@ngrx/store';\r\nimport {FormBuilder} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-fighter-detail',\r\n  templateUrl: './fighter-detail.component.html',\r\n  styleUrls: ['./fighter-detail.component.scss']\r\n})\r\nexport class FighterDetailComponent implements OnInit {\r\n\r\n  fighterForm = this.fb.group({\r\n    id: [''],\r\n    name: [''],\r\n    country: [''],\r\n    fightingStyle: ['']\r\n  });\r\n\r\n  @Input()\r\n  set card(card: Fighter) {\r\n    this.fighterForm.patchValue(card);\r\n  }\r\n\r\n  @Output()\r\n  actionEmitter = new EventEmitter<Action>();\r\n\r\n  constructor(private fb: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  unselect() {\r\n    this.actionEmitter.emit(unselectCard());\r\n  }\r\n\r\n  update() {\r\n    if (this.fighterForm.get('id') && this.fighterForm.get('id').value !== '') {\r\n      this.actionEmitter.emit(updateCard({card: this.fighterForm.value}));\r\n    } else {\r\n      this.actionEmitter.emit(createCard({card: this.fighterForm.value}));\r\n    }\r\n  }\r\n\r\n  delete() {\r\n    this.actionEmitter.emit(deleteCard({id: this.fighterForm.get('id').value}));\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N0cmVldGZpZ2h0ZXIvY29tcG9uZW50cy9maWdodGVyLWxpc3QvZmlnaHRlci1saXN0LmNvbXBvbmVudC5zY3NzIn0= */\"","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {Fighter} from '../../model/fighter.model';\r\nimport {Action} from '@ngrx/store';\r\nimport {selectCard} from '../../store/actions/cards.actions';\r\n\r\n@Component({\r\n  selector: 'app-fighter-list',\r\n  templateUrl: './fighter-list.component.html',\r\n  styleUrls: ['./fighter-list.component.scss']\r\n})\r\nexport class FighterListComponent implements OnInit {\r\n\r\n  @Input()\r\n  cards: Fighter[];\r\n\r\n  @Output()\r\n  actionEmitter = new EventEmitter<Action>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  select(card: Fighter) {\r\n    this.actionEmitter.emit(selectCard({card}));\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N0cmVldGZpZ2h0ZXIvY29udGFpbmVycy9maWdodGVyL2ZpZ2h0ZXIuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {Fighter} from '../../model/fighter.model';\r\nimport {Action, select, Store} from '@ngrx/store';\r\nimport {FighterState} from '../../store/reducers/global.reducer';\r\nimport {getCard} from '../../store/selectors/cards.selectors';\r\n\r\n@Component({\r\n  selector: 'app-fighter',\r\n  templateUrl: './fighter.component.html',\r\n  styleUrls: ['./fighter.component.scss']\r\n})\r\nexport class FighterComponent implements OnInit {\r\n\r\n  card$: Observable<Fighter>;\r\n\r\n  constructor(private store: Store<FighterState>) { }\r\n\r\n  ngOnInit() {\r\n    this.card$ = this.store.pipe(select(getCard));\r\n  }\r\n\r\n  dispatch(action: Action) {\r\n    this.store.dispatch(action);\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N0cmVldGZpZ2h0ZXIvY29udGFpbmVycy9maWdodGVycy9maWdodGVycy5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FighterState} from '../../store/reducers/global.reducer';\r\nimport {Action, select, Store} from '@ngrx/store';\r\nimport {Observable} from 'rxjs';\r\nimport {Fighter} from '../../model/fighter.model';\r\nimport {getAllCards} from '../../store/selectors/cards.selectors';\r\n\r\n@Component({\r\n  selector: 'app-fighters',\r\n  templateUrl: './fighters.component.html',\r\n  styleUrls: ['./fighters.component.scss']\r\n})\r\nexport class FightersComponent implements OnInit {\r\n\r\n  cards$: Observable<Fighter[]>;\r\n\r\n  constructor(private store: Store<FighterState>) { }\r\n\r\n  ngOnInit() {\r\n    this.cards$ = this.store.pipe(select(getAllCards));\r\n  }\r\n\r\n  dispatch(action: Action) {\r\n    this.store.dispatch(action);\r\n  }\r\n\r\n}\r\n","import {createAction, props} from '@ngrx/store';\r\nimport {Fighter} from '../../model/fighter.model';\r\n\r\nexport const updateCardsList = createAction(\r\n  '[Cards] Update cards list.',\r\n  props<{cards: Fighter[]}>()\r\n)\r\n\r\nexport const createCard = createAction(\r\n  '[Cards] Create card.',\r\n  props<{card: Fighter}>()\r\n);\r\n\r\nexport const updateCard = createAction(\r\n  '[Cards] Update card.',\r\n  props<{card: Fighter}>()\r\n);\r\n\r\nexport const deleteCard = createAction(\r\n  '[Cards] Delete cards.',\r\n  props<{id: string}>()\r\n);\r\n\r\nexport const selectCard = createAction(\r\n  '[Cards] Select card.',\r\n  props<{card: Fighter}>()\r\n);\r\n\r\nexport const unselectCard = createAction(\r\n  '[Cards] Unselect card.'\r\n);\r\n","import {Injectable} from '@angular/core';\r\nimport {act, Actions, createEffect, ofType} from '@ngrx/effects';\r\nimport {Fighter} from '../../model/fighter.model';\r\nimport {createCard, deleteCard, updateCard, updateCardsList} from '../actions/cards.actions';\r\nimport {AngularFirestore} from '@angular/fire/firestore';\r\nimport {catchError, concatMap, exhaustMap, map} from 'rxjs/operators';\r\nimport {navigateTo} from '../../../store/actions/app.actions';\r\nimport {showSnackBar} from '../../../core/store/actions/core.actions';\r\nimport {from, of} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class CardsEffects {\r\n  updateCardsList$ = createEffect(() =>\r\n    this.firestore.collection<Fighter>('fighters').valueChanges().pipe(\r\n      map(cards => updateCardsList({cards}))\r\n  ));\r\n\r\n  updateCard$ = createEffect(() => this.action$.pipe(\r\n    ofType(updateCard),\r\n    exhaustMap((action) =>\r\n      from(this.firestore.doc(`fighters/${action.card.id}`).set(action.card)).pipe(\r\n        concatMap(() => from([\r\n          navigateTo({commands: ['core', 'layout', 'streetfighter', 'fighters']}),\r\n          showSnackBar({message: `${action.card.name} updated`, config: {}})\r\n        ])),\r\n        catchError(() => of(showSnackBar({\r\n          message: 'Something went wrong.', config: {\r\n            duration: 5000\r\n          }}))\r\n        )\r\n      )\r\n    )\r\n  ));\r\n\r\n  deleteCard$ = createEffect(() => this.action$.pipe(\r\n    ofType(deleteCard),\r\n    exhaustMap((action) =>\r\n      from(this.firestore.doc(`fighters/${action.id}`).delete()).pipe(\r\n        concatMap(() => from([\r\n          navigateTo({commands: ['core', 'layout', 'streetfighter', 'fighters']}),\r\n          showSnackBar({message: 'Card deleted', config: {}})\r\n        ])),\r\n        catchError(() => of(showSnackBar( {\r\n          message: 'Something went wrong.', config: {\r\n            duration: 5000\r\n          }\r\n          })))\r\n      )\r\n    )\r\n  ));\r\n\r\n  createCard$ = createEffect(() => this.action$.pipe(\r\n    ofType(createCard),\r\n    exhaustMap((action) =>\r\n      from(this.firestore.doc(`fighters/${this.createId()}`).set({\r\n        id: this.newId,\r\n        name: action.card.name,\r\n        country: action.card.country,\r\n        fightingStyle: action.card.fightingStyle\r\n      })).pipe(\r\n        concatMap(() => from( [\r\n          navigateTo({commands: ['core', 'layout', 'streetfighter', 'fighters']}),\r\n          showSnackBar({message: `${action.card.name} created`, config: {}})\r\n        ])),\r\n        catchError(() => of(showSnackBar({\r\n          message: 'Something went wrong', config: {\r\n            duration: 5000\r\n          }\r\n        })))\r\n      )\r\n    )\r\n  ));\r\n\r\n  constructor(private action$: Actions, private firestore: AngularFirestore) {\r\n  }\r\n\r\n  newId: string;\r\n  private createId() {\r\n    this.newId = this.firestore.createId();\r\n    return this.newId;\r\n  }\r\n}\r\n","import {Fighter} from '../../model/fighter.model';\r\nimport {Action, createReducer, on} from '@ngrx/store';\r\nimport {createCard, deleteCard, selectCard, unselectCard, updateCard, updateCardsList} from '../actions/cards.actions';\r\nimport {createEntityAdapter, EntityState} from '@ngrx/entity';\r\n\r\nexport const cardAdapter = createEntityAdapter<Fighter>( {\r\n    selectId: fighter => fighter.id,\r\n    sortComparer: (a: Fighter, b: Fighter) => a.name.localeCompare(b.name)\r\n});\r\n\r\nexport interface CardsState extends EntityState<Fighter> {\r\n  card?: Fighter;\r\n}\r\n\r\n// const pog = [\r\n//  {id: 1, name: 'Ryu',  country: 'Japan', fightingStyle: 'Karate'},\r\n//  {id: 2, name: 'Chun-li',  country: 'China', fightingStyle: 'Kung Fu'},\r\n//  {id: 3, name: 'Guile',  country: 'USA', fightingStyle: 'Military Fighting' },\r\n//  {id: 4, name: 'Zangief',  country: 'Russia', fightingStyle: 'Wrestling'},\r\n//  {id: 5, name: 'Dhalsim',  country: 'India', fightingStyle: 'Yoga'},\r\n//  {id: 6, name: 'Ken',  country: 'USA', fightingStyle: 'Karate' },\r\n//  {id: 7, name: 'Cammy',  country: 'England', fightingStyle: 'Military Special Forces Fighting Style' },\r\n//  {id: 8, name: 'Blanka',  country: 'Brazil', fightingStyle: 'Jungle Wild Fighting Style' }\r\n// ];\r\n\r\nconst initialState = cardAdapter.getInitialState();\r\n// const initialState = cardAdapter.addAll(pog, cardAdapter.getInitialState());\r\n\r\nconst reducer = createReducer(\r\n  initialState,\r\n  on(updateCardsList, (state, {cards}) => cardAdapter.addAll(cards, state)),\r\n  on(selectCard, (state, {card}) => ({...state, card})),\r\n  on(unselectCard, updateCard, createCard, deleteCard, (state: CardsState) => {\r\n    const {card, ...rest} = state;\r\n    return rest;\r\n  })// ,\r\n  // on(createCard, (state, {card}) => cardAdapter.addOne(card, state)),\r\n  // on(deleteCard, (state, {id}) => cardAdapter.removeOne(id, state))\r\n);\r\n\r\nexport function reducerCards(state: CardsState, action: Action) {\r\n  return reducer(state, action);\r\n}\r\n","import {CardsState, reducerCards} from './cards.reducer';\r\nimport {ActionReducerMap, createFeatureSelector} from '@ngrx/store';\r\n\r\nexport interface FighterState {\r\n  cards: CardsState;\r\n};\r\n\r\nexport const fighterReducer: ActionReducerMap<FighterState> = {\r\n  cards: reducerCards\r\n};\r\n\r\nexport const getFighterState = createFeatureSelector<FighterState>(\r\n  'fighter'\r\n);\r\n","import {createSelector} from '@ngrx/store';\r\nimport {getFighterState} from '../reducers/global.reducer';\r\nimport {cardAdapter} from '../reducers/cards.reducer';\r\n\r\nexport const getCardsState = createSelector(\r\n  getFighterState,\r\n  state => state.cards\r\n);\r\n\r\nexport const getAllCards = createSelector(\r\n  getCardsState,\r\n  state => cardAdapter.getSelectors().selectAll(state)\r\n);\r\n\r\nexport const getCard = createSelector(\r\n  getCardsState,\r\n  state => state.card\r\n);\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {FightersComponent} from './containers/fighters/fighters.component';\r\nimport {FighterComponent} from './containers/fighter/fighter.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {path: '', pathMatch: 'full', redirectTo: 'fighters'},\r\n  {path: 'fighters', component: FightersComponent},\r\n  {path: 'fighter', component: FighterComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class StreetFighterRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { StreetFighterRoutingModule } from './street-fighter-routing.module';\r\nimport { FightersComponent } from './containers/fighters/fighters.component';\r\nimport { FighterComponent } from './containers/fighter/fighter.component';\r\nimport { FighterListComponent } from './components/fighter-list/fighter-list.component';\r\nimport { FighterDetailComponent } from './components/fighter-detail/fighter-detail.component';\r\nimport {SharedModule} from '../core/shared/shared.module';\r\nimport {StoreModule} from '@ngrx/store';\r\nimport {fighterReducer} from './store/reducers/global.reducer';\r\nimport {EffectsModule} from '@ngrx/effects';\r\nimport {CardsEffects} from './store/effects/cards.effects';\r\n\r\n\r\n@NgModule({\r\n  declarations: [FightersComponent, FighterComponent, FighterListComponent, FighterDetailComponent],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    StreetFighterRoutingModule,\r\n    StoreModule.forFeature('fighter', fighterReducer),\r\n    EffectsModule.forFeature([CardsEffects])\r\n  ]\r\n})\r\nexport class StreetFighterModule { }\r\n"],"sourceRoot":""}